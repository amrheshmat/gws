@using TripBusiness.Ibusiness
@inject ILocalizationService _localizationService;
@{
    ViewData["Title"] = "Admin Page";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var NumberOfUsers = ViewBag.NumberOfUsers;
    var NumberOfRoles = ViewBag.NumberOfRoles;
   // var NumberOfSuccessRequest = ViewBag.NumberOfSuccessRequest;
}

<div class="bg-primary pt-10 pb-21"></div>
<div class="mt-n22 px-6 container-fluid">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-12">
            <div>
                <div class="d-flex justify-content-between align-items-center">
                    <div class="mb-2 mb-lg-0">
                        <h3 class="mb-0 text-white">@_localizationService.Localize("Statistics") </h3>
                        <span id="sendNotification">test notification</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4 col-lg-2 ">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div><h4 class="mb-0"><a href="Report/UserReport">users</a></h4></div>
                        <div class="icon-shape icon-md bg-light-primary text-primary rounded-2">
                            <i class="fa fa-user"></i>
                        </div>
                    </div>
                     <div>
                        <h1 class="fw-bold">@NumberOfUsers</h1>
                       @*  <p class="mb-0">
                            <span classname="text-dark me-2">@NumberOfSuccessRequest% </span>@_localizationService.Localize("Completed")
                        </p> *@
                    </div> 
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4 col-lg-2 ">
           <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div><h4 class="mb-0"><a href="#">roles</a></h4></div>
                        <div class="icon-shape icon-md bg-light-primary text-primary rounded-2">
                            <i class="fa fa-lock"></i>
                        </div>
                    </div>
                    <div>
                        <h1 class="fw-bold">@NumberOfRoles</h1>
                        @* <p class="mb-0">
                        <span classname="text-dark me-2">@NumberOfSuccessRequest% </span>@_localizationService.Localize("Completed")
                        </p> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <div id="myPlot" style="width:100%;max-width:700px"></div>
        </div>
        <div class="col-6">
            <div id="myPlot2" style="width:100%;max-width:700px"></div>
        </div>
    </div>
</div>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<!-- Firebase 8.x SDKs -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-messaging.js"></script>
<script>
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyDBWpn0l-5oTAHsApVJBW9xp0pZHJSlnm4",
        authDomain: "gws-core-399b1.firebaseapp.com",
        projectId: "gws-core-399b1",
        storageBucket: "gws-core-399b1.firebasestorage.app",
        messagingSenderId: "260487603676",
        appId: "1:260487603676:web:4c9f8448b9dffc0a779b19",
        measurementId: "G-95PY49RZ3C"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    var token = "";
    // Initialize Firebase Cloud Messaging
    const messaging = firebase.messaging();
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/firebase-messaging-sw.js')
            .then(function (registration) {
                console.log('Service Worker registered with scope:', registration.scope);
                // Optionally, you can pass the registration to Firebase Messaging.
                firebase.messaging().useServiceWorker(registration);
            })
            .catch(function (error) {
                console.error('Service Worker registration failed:', error);
            });
    }
    Notification.requestPermission().then(permission => {
        if (permission === "granted") {
            console.log("Notification permission granted.");
            // Get the FCM token (add your VAPID key here)
            messaging.getToken({ vapidKey: 'BM8YcnTa79rqgbJjAj_t5vl1ONAJZ1bxNXjN45hrLXgJsfMQSEoVto2_YLrJapz-zlnzzKozqCYZ1HW_ei1Ow8M' })
                .then(currentToken => {
                    if (currentToken) {
                        token = currentToken
                        console.log("FCM Token:", currentToken);
                        // You can save the token to your server here
                    } else {
                        console.error("No FCM token available.");
                    }
                })
                .catch(error => {
                    console.error("Error retrieving FCM token:", error);
                });
        } else {
            console.error("Notification permission denied.");
        }
    }).catch(error => {
        console.error("Permission request failed:", error);
    });
    // Handle incoming messages when app is in the foreground
    messaging.onMessage((payload) => {
        console.log("Message received. ", payload);
        // Customize how you handle incoming messages here
    });
    $(document).ready(function () {
        alert(token);
        $('#sendNotification').on("click", function (e) {
            var notificationRequest = {};
            notificationRequest.DeviceToken = token;
            notificationRequest.Title = "token title from amr";
            notificationRequest.Body = "token message from amr";
            $.ajax({
                url: "/api/Notifications/send/",
                method: 'POST',
                contentType: "application/json",
                data: JSON.stringify(notificationRequest),
                success: function (info) {
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching data:', error);
                }
            });
        });
       



        $.ajax({
            url: "/admin/chart/",
            method: 'GET',
            success: function (info) {
                const xArray = ["users", "roles","languages"];
                const yArray = info;

                const layout = { title: "just for sample" };

                const data = [{ labels: xArray, values: yArray, type: "pie" }];
                Plotly.newPlot("myPlot", data, layout);

                const data2 = [{
                    x: xArray,
                    y: yArray,
                    type: "bar",
                    orientation: "v",//h
                    marker: { color: "rgba(0,0,255,0.6)" }
                }];

                Plotly.newPlot("myPlot2", data2, layout);

            },
            error: function (xhr, status, error) {
                console.error('Error fetching data:', error);
            }
        });
    });
</script>